from .. import errors as errors, utils as utils
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..types import CancellableStream as CancellableStream, ContainerConfig as ContainerConfig, EndpointConfig as EndpointConfig, HostConfig as HostConfig, NetworkingConfig as NetworkingConfig

class ContainerApiMixin:
    def attach(self, container, stdout: bool = True, stderr: bool = True, stream: bool = False, logs: bool = False, demux: bool = False): ...
    def attach_socket(self, container, params=None, ws: bool = False): ...
    def commit(self, container, repository=None, tag=None, message=None, author=None, pause: bool = True, changes=None, conf=None): ...
    def containers(self, quiet: bool = False, all: bool = False, trunc: bool = False, latest: bool = False, since=None, before=None, limit: int = -1, size: bool = False, filters=None): ...
    def create_container(self, image, command=None, hostname=None, user=None, detach: bool = False, stdin_open: bool = False, tty: bool = False, ports=None, environment=None, volumes=None, network_disabled: bool = False, name=None, entrypoint=None, working_dir=None, domainname=None, host_config=None, mac_address=None, labels=None, stop_signal=None, networking_config=None, healthcheck=None, stop_timeout=None, runtime=None, use_config_proxy: bool = True, platform=None): ...
    def create_container_config(self, *args, **kwargs): ...
    def create_container_from_config(self, config, name=None, platform=None): ...
    def create_host_config(self, *args, **kwargs): ...
    def create_networking_config(self, *args, **kwargs): ...
    def create_endpoint_config(self, *args, **kwargs): ...
    def diff(self, container): ...
    def export(self, container, chunk_size=...): ...
    def get_archive(self, container, path, chunk_size=..., encode_stream: bool = False): ...
    def inspect_container(self, container): ...
    def kill(self, container, signal=None) -> None: ...
    def logs(self, container, stdout: bool = True, stderr: bool = True, stream: bool = False, timestamps: bool = False, tail: str = 'all', since=None, follow=None, until=None): ...
    def pause(self, container) -> None: ...
    def port(self, container, private_port): ...
    def put_archive(self, container, path, data): ...
    def prune_containers(self, filters=None): ...
    def remove_container(self, container, v: bool = False, link: bool = False, force: bool = False) -> None: ...
    def rename(self, container, name) -> None: ...
    def resize(self, container, height, width) -> None: ...
    def restart(self, container, timeout: int = 10) -> None: ...
    def start(self, container, *args, **kwargs) -> None: ...
    def stats(self, container, decode=None, stream: bool = True, one_shot=None): ...
    def stop(self, container, timeout=None) -> None: ...
    def top(self, container, ps_args=None): ...
    def unpause(self, container) -> None: ...
    def update_container(self, container, blkio_weight=None, cpu_period=None, cpu_quota=None, cpu_shares=None, cpuset_cpus=None, cpuset_mems=None, mem_limit=None, mem_reservation=None, memswap_limit=None, kernel_memory=None, restart_policy=None): ...
    def wait(self, container, timeout=None, condition=None): ...
