from .. import auth as auth, errors as errors, utils as utils
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from _typeshed import Incomplete

log: Incomplete

class ImageApiMixin:
    def get_image(self, image, chunk_size=...): ...
    def history(self, image): ...
    def images(self, name=None, quiet: bool = False, all: bool = False, filters=None): ...
    def import_image(self, src=None, repository=None, tag=None, image=None, changes=None, stream_src: bool = False): ...
    def import_image_from_data(self, data, repository=None, tag=None, changes=None): ...
    def import_image_from_file(self, filename, repository=None, tag=None, changes=None): ...
    def import_image_from_stream(self, stream, repository=None, tag=None, changes=None): ...
    def import_image_from_url(self, url, repository=None, tag=None, changes=None): ...
    def import_image_from_image(self, image, repository=None, tag=None, changes=None): ...
    def inspect_image(self, image): ...
    def inspect_distribution(self, image, auth_config=None): ...
    def load_image(self, data, quiet=None): ...
    def prune_images(self, filters=None): ...
    def pull(self, repository, tag=None, stream: bool = False, auth_config=None, decode: bool = False, platform=None, all_tags: bool = False): ...
    def push(self, repository, tag=None, stream: bool = False, auth_config=None, decode: bool = False): ...
    def remove_image(self, image, force: bool = False, noprune: bool = False): ...
    def search(self, term, limit=None): ...
    def tag(self, image, repository, tag=None, force: bool = False): ...

def is_file(src): ...
