from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import BuildError as BuildError, ImageLoadError as ImageLoadError, InvalidArgument as InvalidArgument
from ..utils import parse_repository_tag as parse_repository_tag
from ..utils.json_stream import json_stream as json_stream
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete

class Image(Model):
    @property
    def labels(self): ...
    @property
    def short_id(self): ...
    @property
    def tags(self): ...
    def history(self): ...
    def remove(self, force: bool = False, noprune: bool = False): ...
    def save(self, chunk_size=..., named: bool = False): ...
    def tag(self, repository, tag=None, **kwargs): ...

class RegistryData(Model):
    image_name: Incomplete
    def __init__(self, image_name, *args, **kwargs) -> None: ...
    @property
    def id(self): ...
    @property
    def short_id(self): ...
    def pull(self, platform=None): ...
    def has_platform(self, platform): ...
    attrs: Incomplete
    def reload(self) -> None: ...

class ImageCollection(Collection):
    model = Image
    def build(self, **kwargs): ...
    def get(self, name): ...
    def get_registry_data(self, name, auth_config=None): ...
    def list(self, name=None, all: bool = False, filters=None): ...
    def load(self, data): ...
    def pull(self, repository, tag=None, all_tags: bool = False, **kwargs): ...
    def push(self, repository, tag=None, **kwargs): ...
    def remove(self, *args, **kwargs) -> None: ...
    def search(self, *args, **kwargs): ...
    def prune(self, filters=None): ...
    def prune_builds(self, *args, **kwargs): ...

def normalize_platform(platform, engine_info): ...
