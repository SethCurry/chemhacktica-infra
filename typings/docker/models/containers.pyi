from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import ContainerError as ContainerError, DockerException as DockerException, ImageNotFound as ImageNotFound, NotFound as NotFound, create_unexpected_kwargs_error as create_unexpected_kwargs_error
from ..types import HostConfig as HostConfig, NetworkingConfig as NetworkingConfig
from ..utils import version_gte as version_gte
from .images import Image as Image
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete
from typing import NamedTuple

class Container(Model):
    @property
    def name(self) -> str: ...
    @property
    def image(self) -> str: ...
    @property
    def labels(self): ...
    @property
    def status(self) -> str: ...
    @property
    def health(self): ...
    @property
    def ports(self): ...
    def attach(self, **kwargs): ...
    def attach_socket(self, **kwargs): ...
    def commit(self, repository=None, tag=None, **kwargs): ...
    def diff(self): ...
    def exec_run(self, cmd, stdout: bool = True, stderr: bool = True, stdin: bool = False, tty: bool = False, privileged: bool = False, user: str = '', detach: bool = False, stream: bool = False, socket: bool = False, environment=None, workdir=None, demux: bool = False): ...
    def export(self, chunk_size=...): ...
    def get_archive(self, path, chunk_size=..., encode_stream: bool = False): ...
    def kill(self, signal=None): ...
    def logs(self, **kwargs): ...
    def pause(self): ...
    def put_archive(self, path, data): ...
    def remove(self, **kwargs): ...
    def rename(self, name): ...
    def resize(self, height, width): ...
    def restart(self, **kwargs): ...
    def start(self, **kwargs): ...
    def stats(self, **kwargs): ...
    def stop(self, **kwargs): ...
    def top(self, **kwargs): ...
    def unpause(self): ...
    def update(self, **kwargs): ...
    def wait(self, **kwargs): ...

class ContainerCollection(Collection):
    model = Container
    def run(self, image, command=None, stdout: bool = True, stderr: bool = False, remove: bool = False, **kwargs): ...
    def create(self, image, command=None, **kwargs): ...
    def get(self, container_id): ...
    def list(self, all: bool = False, before: str | None = None, filters: dict[str, str] | None = None, limit: int = -1, since: str | None = None, sparse: bool = False, ignore_removed: bool = False) -> list[Container]: ...
    def prune(self, filters=None): ...

RUN_CREATE_KWARGS: Incomplete
RUN_HOST_CONFIG_KWARGS: Incomplete

class ExecResult(NamedTuple):
    exit_code: Incomplete
    output: Incomplete
