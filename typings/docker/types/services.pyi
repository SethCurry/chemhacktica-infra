from .. import errors as errors
from ..constants import IS_WINDOWS_PLATFORM as IS_WINDOWS_PLATFORM
from ..utils import check_resource as check_resource, convert_service_networks as convert_service_networks, format_environment as format_environment, format_extra_hosts as format_extra_hosts, parse_bytes as parse_bytes, split_command as split_command
from _typeshed import Incomplete

class TaskTemplate(dict):
    def __init__(self, container_spec, resources=None, restart_policy=None, placement=None, log_driver=None, networks=None, force_update=None) -> None: ...
    @property
    def container_spec(self): ...
    @property
    def resources(self): ...
    @property
    def restart_policy(self): ...
    @property
    def placement(self): ...

class ContainerSpec(dict):
    def __init__(self, image, command=None, args=None, hostname=None, env=None, workdir=None, user=None, labels=None, mounts=None, stop_grace_period=None, secrets=None, tty=None, groups=None, open_stdin=None, read_only=None, stop_signal=None, healthcheck=None, hosts=None, dns_config=None, configs=None, privileges=None, isolation=None, init=None, cap_add=None, cap_drop=None, sysctls=None) -> None: ...

class Mount(dict):
    def __init__(self, target, source, type: str = 'volume', read_only: bool = False, consistency=None, propagation=None, no_copy: bool = False, labels=None, driver_config=None, tmpfs_size=None, tmpfs_mode=None) -> None: ...
    @classmethod
    def parse_mount_string(cls, string): ...

class Resources(dict):
    def __init__(self, cpu_limit=None, mem_limit=None, cpu_reservation=None, mem_reservation=None, generic_resources=None) -> None: ...

class UpdateConfig(dict):
    def __init__(self, parallelism: int = 0, delay=None, failure_action: str = 'continue', monitor=None, max_failure_ratio=None, order=None) -> None: ...

class RollbackConfig(UpdateConfig): ...

class RestartConditionTypesEnum:
    NONE: Incomplete
    ON_FAILURE: Incomplete
    ANY: Incomplete

class RestartPolicy(dict):
    condition_types = RestartConditionTypesEnum
    def __init__(self, condition=..., delay: int = 0, max_attempts: int = 0, window: int = 0) -> None: ...

class DriverConfig(dict):
    def __init__(self, name, options=None) -> None: ...

class EndpointSpec(dict):
    def __init__(self, mode=None, ports=None) -> None: ...

def convert_service_ports(ports): ...

class ServiceMode(dict):
    mode: Incomplete
    def __init__(self, mode, replicas=None, concurrency=None) -> None: ...
    @property
    def replicas(self): ...

class SecretReference(dict):
    def __init__(self, secret_id, secret_name, filename=None, uid=None, gid=None, mode: int = 292) -> None: ...

class ConfigReference(dict):
    def __init__(self, config_id, config_name, filename=None, uid=None, gid=None, mode: int = 292) -> None: ...

class Placement(dict):
    def __init__(self, constraints=None, preferences=None, platforms=None, maxreplicas=None) -> None: ...

class PlacementPreference(dict):
    def __init__(self, strategy, descriptor) -> None: ...

class DNSConfig(dict):
    def __init__(self, nameservers=None, search=None, options=None) -> None: ...

class Privileges(dict):
    def __init__(self, credentialspec_file=None, credentialspec_registry=None, selinux_disable=None, selinux_user=None, selinux_role=None, selinux_type=None, selinux_level=None) -> None: ...

class NetworkAttachmentConfig(dict):
    def __init__(self, target, aliases=None, options=None) -> None: ...
