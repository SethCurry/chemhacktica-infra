from _typeshed import Incomplete
from fire import inspectutils as inspectutils

INITIAL_COMPONENT: str
INSTANTIATED_CLASS: str
CALLED_ROUTINE: str
CALLED_CALLABLE: str
ACCESSED_PROPERTY: str
COMPLETION_SCRIPT: str
INTERACTIVE_MODE: str

class FireTrace:
    name: Incomplete
    separator: Incomplete
    elements: Incomplete
    verbose: Incomplete
    show_help: Incomplete
    show_trace: Incomplete
    def __init__(self, initial_component, name=None, separator: str = '-', verbose: bool = False, show_help: bool = False, show_trace: bool = False) -> None: ...
    def GetResult(self): ...
    def GetLastHealthyElement(self): ...
    def HasError(self): ...
    def AddAccessedProperty(self, component, target, args, filename, lineno) -> None: ...
    def AddCalledComponent(self, component, target, args, filename, lineno, capacity, action=...) -> None: ...
    def AddCompletionScript(self, script) -> None: ...
    def AddInteractiveMode(self) -> None: ...
    def AddError(self, error, args) -> None: ...
    def AddSeparator(self) -> None: ...
    def GetCommand(self, include_separators: bool = True): ...
    def NeedsSeparator(self): ...
    def NeedsSeparatingHyphenHyphen(self, flag: str = 'help'): ...

class FireTraceElement:
    component: Incomplete
    args: Incomplete
    def __init__(self, component=None, action=None, target=None, args=None, filename=None, lineno=None, error=None, capacity=None) -> None: ...
    def HasError(self): ...
    def HasCapacity(self): ...
    def HasSeparator(self): ...
    def AddSeparator(self) -> None: ...
    def ErrorAsStr(self): ...
